server{
        listen 8888;
        server_name localhost;
        resolver 114.114.114.114;
        location / {
            include mime.types;
            #set varible to proxy 
            set $proxy '';
            #proxy_redirect     off;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   Host             $host;
            access_by_lua_file lua/access2.lua;
            body_filter_by_lua_file lua/replace.lua;
            header_filter_by_lua_block {
            }
        }
        location @download_server {
            proxy_set_header Accept-Encoding "";
            proxy_set_header Host      $host;
            proxy_pass $scheme://$proxy$request_uri;
            header_filter_by_lua_block {
                require"cjson".encode(ngx.resp.get_headers())
            --    ngx.header["content-type"]='text/html;charset=UTF-8'
                local resp = require "lua.lib.resp"
                --get 3xx location uri
                local redirect_target=resp.get_resp_headers_Location()                    
                ngx.log(ngx.ALERT,'ngx.status='..ngx.status)
                if redirect_target and ngx.status > 300 and ngx.status <309 then
                        ngx.log(ngx.ALERT,'location='..redirect_target)
                        ngx.log(ngx.ALERT,'redirect_target:'..redirect_target)
                        local redirect_target_changed,n,err=ngx.re.gsub(redirect_target, '(^http?[:][/][/][^/]+)', 'http://proxyman.com:8888')
                        ngx.log(ngx.ALERT, 'redirect_target_changed: '..redirect_target_changed)
                        return ngx.redirect(redirect_target_changed, 302)
                 elseif ngx.status == 500 then
                            return ngx.exit(500)
                 end
            }
            #want to add respon header here. resp header "text/html;charset=UTF-8
        }
            
}

 
