#  Author:liuyf
#  Email:liuyf90@gmail.com
#  Time:Nov 4, 2022 at 14:36
#  
#  The project will proxy some inner address to outer web.
#  precondition1: a web domain web to proxy cas server.
#  precondition2: busi web app will be proxy here. 
#  precondition3: busi web app will saved some datas that 
#                 has been stored here in advance to redis.
#  
#  some quality requirements:
#    1. more 100qps
#    2. many of comments
#    3. Maintainability
#
#  (based by openresty/1.19.3.1)
#
user root;
#the number of cores 
worker_processes  4;
#output log file
error_log logs/error.log;
error_log logs/info.log info;

events {
    worker_connections 1024;
}
http {
    #devlop disable cache,online change to 'on'
    lua_code_cache off;
    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '$prefix/conf/lua/?.lua;;';
    #safe from concurrent accesses from multiple Nginx worker processes for the same lua_shared_dict zone
    lua_shared_dict ips 1m; #The ips that will be proxied 
    lua_shared_dict blacklist 1m; 
    lua_shared_dict cookies 1m; 
    # parase: starting-worker,initialize , move redis data to shared_dict
    init_worker_by_lua_file lua/init.lua;
    
    # Set some properties below to improve performance
    keepalive_timeout 60; # The parameter sets a timeout during which a keep-alive client connection will stay open on the server side.
    sendfile on; #default on
    tcp_nopush on; # sending a file in full packets.  only when sendfile is used
    

    #below Adds the specified field to a **response header** provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13n, or 308 
    #set corss domain
    add_header 'Access-Control-Allow-Orign' *;
    #set cookie
    add_header 'Access-Control-Allow-Credentials' 'true';
    #include get/post/put/delete
    add_header 'Access-Control-Allow-Methods' *;
    #allow request header
    add_header 'Access-Control-Allow-Headers' *;

   #proxy cas server path
     server{
        listen 7777;
        server_name webvpn2.hrbfu.edu.cn;
        resolver 172.16.17.23;
        location /{
           set $backend_servers ids.hrbfu.edu.cn;
           # set_by_lua_block $cas {
           #     local data =require "lua.init_data"
           #     return data.get("cas")
           # }
            proxy_pass http://$backend_servers:80;
            header_filter_by_lua_file lua/resp_header_filter.lua;
        }
    }

     #proxy webvpn entrance (apps list.html)
     server{
         listen 443;
         # server_name webvpn2.hrbcu.edu.cn;
         server_name webvpn2.hrbfu.edu.cn;
         resolver 172.16.17.23;
         #配置webvpn前端站点证书
         ssl on;
         ssl_certificate     conf.d/webcert/local.private.crt;
         ssl_certificate_key conf.d/webcert/local.private.key;
         ssl_session_timeout 5m;
         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
         ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
         ssl_prefer_server_ciphers on;
         add_header Referrer-Policy "unsafe-url";

         location / {
             proxy_pass http://localhost:8088;
         }
         access_by_lua_block {
             local castgc=ngx.var.cookie_CASTGC
                 if castgc ~= nil then
                     local data = require "lua.init_data"
                     ngx.header['Set-Cookie'] = 'CASTGC='..castgc..';'.." Domain="..data.get("domainName")..";".." Expires="..ngx.cookie_time(ngx.time()+500)..";".." Path=/"
                 end
         }

     } 
     server {
         listen 80 default_server;
         server_name webvpn2.hrbfu.edu.cn;
         resolver 172.16.17.23;
         return 301 https://$host$request_uri;
     }

   #  server {
   #      listen 8089;
   #      server_name webvpn2.hrbfu.edu.cn;
   #      resolver 172.16.17.23;
   #      return 403;
   #  }

#     server {
#         #listen 80;
#         #server_name webvpn2.hrbfu.edu.cn;
#         #return 301 https://$server_name$request_uri;
#         listen 80;
#         # server_name webvpn2.hrbcu.edu.cn;
#         server_name webvpn2.hrbfu.edu.cn;
#         resolver 172.16.17.23;
#         location / {
#             proxy_pass http://localhost:8088;
#         }
#         access_by_lua_block {
#             local castgc=ngx.var.cookie_CASTGC
#                 if castgc ~= nil then
#                    local data = require "lua.init_data"
#                    ngx.header['Set-Cookie'] = 'CASTGC='..castgc..';'.." Domain="..data.get("domainName")..";".." Path=/"
#                 end
#         }
#     }
 #    server{
 #        listen 80;
 #        # server_name webvpn2.hrbcu.edu.cn;
 #        server_name *.webvpn2.hrbfu.edu.cn;
 #        resolver 172.16.17.23;
 #        rewrite (.*) $scheme://$host:8888/$1;
 #    }

   #test    
    server{
        listen 9999;
        server_name webvpn2.hrbfu.edu.cn;
        resolver 172.16.17.23;
        location /{
        #  proxy_pass http://oa.hrbfu.edu.cn;
          rewrite (authserver/)(.*)$ $scheme://$Host:9999/test;
        }
        location /test {
            return 200 'success\n $server_name';
        }
            # busi logic that where to proxy
    }
    # busi section
    include conf.d/proxy.conf;

}
