#
#  Author:liuyf
#  Email:liuyf90@gmail.com
#  Time:Jun 22, 2022 at 15:25
#
worker_processes  1;
error_log logs/error.log;


events {
    worker_connections 1024;
}
http {
    #devlop disable cache,online setup 'on'
    lua_code_cache off;
    #safe from concurrent accesses from multiple Nginx worker processes for the same lua_shared_dict zone
    lua_shared_dict ips 10m;
    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '$prefix/conf/lua/?.lua;$prefix/conf/lua/lib/?.lua;;';
    # test section
    server {
        listen 8080;
        location / {
            default_type text/html;
            #relative path refero to nginx installed path
            #    content_by_lua_file conf/lua/hello.lua;
        }
        location /get_random_string {
            #get random String  
            content_by_lua_file conf/lua/get_random_string.lua;
        } 
        location /decode_info {
            content_by_lua_file conf/lua/decode_info.lua;
        }

        location /getpath {
            content_by_lua_block {
                ngx.say(package.path)
            }
        }
        location /testmylib {
            content_by_lua_block {
                local foo = require "mylib"
                    if not foo then
                        ngx.say("failed to require myblib")
                            return
                            end
                            foo:test()
                            ngx.say(foo.db)
            }
        }
        location /baidu {
            content_by_lua_block {
                local httpc = require("resty.http").new()

                    -- Single-shot requests use the `request_uri` interface.
                    local res, err = httpc:request_uri("http://baidu.com/helloworld", {
                            method = "POST",
                            body = "a=1&b=2",
                            headers = {
                            ["Content-Type"] = "application/x-www-form-urlencoded",
                            },
                            })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                        return
                        end

                        -- At this point, the entire request / response is complete and the connection
                        -- will be closed or back on the connection pool.

                        -- The `res` table contains the expeected `status`, `headers` and `body` fields.
                        local status = res.status
                        local length = res.headers["Content-Length"]
                        local body   = res.body
                        ngx.say("status: " .. status .. "length: " .. length .. "body: " .. body)
            }

        }
        location /go {
            set $proxy "";
            rewrite_by_lua_file conf/lua/content.lua;
            proxy_pass http://$proxy$uri;
        }


    }
    
    # busi section
    server{
        listen 80;
        server_name *.webvpn.com;
        location / {
            set $proxy "";
            content_by_lua_file conf/lua/content.lua;
            proxy_pass http://$proxy$uri;
        }
        location /go {
            set $proxy "";
            rewrite_by_lua_file conf/lua/content.lua;
            proxy_pass http://$proxy$uri;
        }
        location /getDomain {
            content_by_lua_file conf/lua/get_subdomain.lua;
        }
        location /getpath {
            content_by_lua_block {
                ngx.say(package.path)
            }
        }
    }
    
}
    

